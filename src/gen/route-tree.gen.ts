/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './../routes/__root'
import { Route as IndexImport } from './../routes/_index'
import { Route as IndexHomeImport } from './../routes/_index/home'
import { Route as IndexAboutImport } from './../routes/_index/about'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/_index',
  getParentRoute: () => rootRoute,
} as any)

const IndexHomeRoute = IndexHomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => IndexRoute,
} as any)

const IndexAboutRoute = IndexAboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => IndexRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_index': {
      id: '/_index'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_index/about': {
      id: '/_index/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof IndexAboutImport
      parentRoute: typeof IndexImport
    }
    '/_index/home': {
      id: '/_index/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof IndexHomeImport
      parentRoute: typeof IndexImport
    }
  }
}

// Create and export the route tree

interface IndexRouteChildren {
  IndexAboutRoute: typeof IndexAboutRoute
  IndexHomeRoute: typeof IndexHomeRoute
}

const IndexRouteChildren: IndexRouteChildren = {
  IndexAboutRoute: IndexAboutRoute,
  IndexHomeRoute: IndexHomeRoute,
}

const IndexRouteWithChildren = IndexRoute._addFileChildren(IndexRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof IndexRouteWithChildren
  '/about': typeof IndexAboutRoute
  '/home': typeof IndexHomeRoute
}

export interface FileRoutesByTo {
  '': typeof IndexRouteWithChildren
  '/about': typeof IndexAboutRoute
  '/home': typeof IndexHomeRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_index': typeof IndexRouteWithChildren
  '/_index/about': typeof IndexAboutRoute
  '/_index/home': typeof IndexHomeRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/about' | '/home'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/about' | '/home'
  id: '__root__' | '/_index' | '/_index/about' | '/_index/home'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_index"
      ]
    },
    "/_index": {
      "filePath": "_index.tsx",
      "children": [
        "/_index/about",
        "/_index/home"
      ]
    },
    "/_index/about": {
      "filePath": "_index/about.tsx",
      "parent": "/_index"
    },
    "/_index/home": {
      "filePath": "_index/home.tsx",
      "parent": "/_index"
    }
  }
}
ROUTE_MANIFEST_END */
